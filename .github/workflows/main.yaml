# This is a WIP

# jq need to be installed on the runner

name: CICD
on:
  push:
    branches:
      - salah
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

############### Start var config #########
env:
  MANIFESTS: "manifests/"
  # change this to match the version of K8S deployed by Karbon, major and minor only!
  # see https://github.com/instrumenta/kubernetes-json-schema for inputs

  K8S_API_VERSION: "1.17.0"
  # change it to the current version
  METALLB_VERSION: "v0.9.6"
############### End var config############

  K8S_API_VERSION: "1.17.0" 
jobs:
  # Download, install and configure Kubectl
  prepare:    
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get kubectl
        run: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(<kubectl.sha256) kubectl" | sha256sum --check
            chmod +x kubectl
            echo Kubectl installed
  # Manifests should be validated 
  verify:
    runs-on: self-hosted
    needs: prepare
    steps:
      - name: Validating manifests against kubernetes/Karbon API
        run: |
          echo Getting Kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz;rm -f kubeval-linux-amd64.tar.gz
          echo Validating manifests using Kubeval
          ./kubeval --ignore-missing-schemas --kubernetes-version $K8S_API_VERSION manifests/*.yaml
          ./kubeval --ignore-missing-schemas --kubernetes-version $K8S_API_VERSION manifests/rbac*.yaml

  # Apply all rbac manifests
  apply:
    runs-on: self-hosted
    needs: verify
    steps:
      - name: Running cluster connectivity test
        env:
          KUBECONFIG: ${{secrets.KUBECONFIG}}
        run: |
            echo $KUBECONFIG | base64 -d > kubeconfig
            ./kubectl get node --kubeconfig=kubeconfig
      - name: Install configure Metallb
        run: |
          echo configure and install Metallb
          sed -i 's@<CIDR>@'$(cat ${MANIFESTS}config.json | jq -r .metallb.cidr)'@g' ${MANIFESTS}metallb-configmap.yaml
          ./kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/$METALLB_VERSION/manifests/namespace.yaml --kubeconfig=kubeconfig
          ./kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/$METALLB_VERSION/manifests/metallb.yaml --kubeconfig=kubeconfig
          ./kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)" --kubeconfig=kubeconfig
          ./kubectl apply -f ${MANIFESTS}metallb-configmap.yaml --kubeconfig=kubeconfig
      - name: Install configure Traefik
        run: |
          echo configure and install Traefik
          ./kubectl create secret generic do-auth-token --from-literal=DO_AUTH_TOKEN=${{secrets.DO_AUTH_TOKEN}} --kubeconfig=kubeconfig
          ./kubectl apply $(ls ${MANIFESTS}traefik-crd.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig
          ./kubectl apply $(ls ${MANIFESTS}traefik-{d*,i*,s*}.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig
      - name: Apply yaml manifests
        run: |
          echo Applying yaml rbac manifests
          ./kubectl apply $(ls ${MANIFESTS}rbac*.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig
  # Test app deployment
  testing:
    runs-on: self-hosted
    needs: apply
    steps:
      - name: Testing app
        run: |
          echo Testing if app is reachable
          LB_IP=$(./kubectl get svc traefik -o json --kubeconfig=kubeconfig | jq -r '.status.loadBalancer.ingress[0].ip')
          sudo bash -c 'echo '$LB_IP' xpert-services.eu >> /etc/hosts'
          sudo bash -c 'echo '$LB_IP' subdomain.xpert-services.eu >> /etc/hosts'
          sleep 60
          #curl --insecure -H "Host: xpert-services.eu" -vvI https://xpert-services.eu/tls
          [[ $(curl --insecure -vvI https://xpert-services.eu/tls 2>&1 | grep "Let's Encrypt") ]] &>/dev/null && echo "App is reachable with valide TLS certificate" || echo "::warning:: App is not reachable with valide TLS certificate"
  # Dev cycle start from here
  # Remove all manifests
  clean:
    runs-on: self-hosted
    needs: apply
    steps:
      - name: Cleaning
        run: |
          echo Removing yaml manifests
          ./kubectl delete $(ls ${MANIFESTS}*.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig || true
          echo Removing Metallb resources
          ./kubectl delete ns metallb-system --kubeconfig=kubeconfig
          echo Removing Traefik resources
          #./kubectl delete $(ls ${MANIFESTS}traefik*.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig
          ./kubectl delete secret do-auth-token --kubeconfig=kubeconfig
          echo Removing hosts records
          sudo sed -i '/xpert-services.eu$/d' /etc/hosts
  # to be modified
  slack:
    runs-on: self-hosted
    needs: clean
    steps:
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@master
        with:
          status: ${{ job.status }}
          notify_when: 'success,failure,warnings'
          footer: 'Sent from GitHub actions nutanixservices org'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK }}

  # manually cleaning resources
  #./kubectl delete $(ls manifests/*.yaml | awk ' { print " -f " $1 } ') --kubeconfig=kubeconfig
  #./kubectl --kubeconfig=kubeconfig  delete ns metallb-system
  #./kubectl --kubeconfig=kubeconfig  delete secret do-auth-token
  #sudo sed -i '/xpert-services.eu$/d' /etc/hosts